{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOvJGcsPnro040JyZS09xGK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Nagasri1224/AIML_2303A52456/blob/main/lab%20assignment%20-01\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "part-01\n"
      ],
      "metadata": {
        "id": "cm6BoqK9594Z"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0XJ-nkUpzAvd",
        "outputId": "a89524c4-9b2b-4e85-e127-1a15d32ea488"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2, 5, 9, 8])"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "import numpy as np\n",
        "l1=[2,5,9,8]\n",
        "a1=np.array(l1)\n",
        "a1"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(l1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y5ypvkql195p",
        "outputId": "b8250ed5-b473-46b4-db48-aefd8d9b38a4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "list"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(a1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VsC9AHg42B6B",
        "outputId": "7d9fbf64-552d-406d-d399-a93af91337f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "mathematical operations\n"
      ],
      "metadata": {
        "id": "fCR4KTnz2Fxk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a2=np.array([6,1,3,7])\n",
        "a2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9yomELg02Jx5",
        "outputId": "d84689f7-a0c9-497a-f6a9-ad35e2228450"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([6, 1, 3, 7])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"a2 multiplied by a2:\",a1*a2)\n",
        "print(\"a2 divided by a2:\",a2/a1)\n",
        "print(\"a2 raised to poer of a1:\",a2**a1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mdekV-t53FGt",
        "outputId": "e102a7d8-d9ee-45d1-bc32-e9905bfd9c58"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "a2 multiplied by a2: [12  5 27 56]\n",
            "a2 divided by a2: [3.         0.2        0.33333333 0.875     ]\n",
            "a2 raised to poer of a1: [     36       1   19683 5764801]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Adding two arrays {a1} and {a2} together :{a1+a2}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uEm-jAge5m4D",
        "outputId": "b8c65442-35a2-4f85-efc6-b2af936b4009"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Adding two arrays [2 5 9 8] and [6 1 3 7] together :[ 8  6 12 15]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.sin(a1))\n",
        "print(np.log(a1))\n",
        "print(np.exp(a1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BdIYMOup4gCr",
        "outputId": "8021b3fd-5cd2-41bb-94b6-e68640f8b6d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sine: [ 0.90929743 -0.95892427  0.41211849  0.98935825]\n",
            "[0.69314718 1.60943791 2.19722458 2.07944154]\n",
            "[7.38905610e+00 1.48413159e+02 8.10308393e+03 2.98095799e+03]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "part-02\n"
      ],
      "metadata": {
        "id": "auLd440v6GK4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "rider = [\"sri\",\"avan\",\"naga\",\"arun\",\"drithi\"]\n",
        "age = [45,36,19,38,4]\n",
        "weight = [50,60,40,65,15]\n",
        "height = [160,165,155,163,140]\n",
        "plt.scatter(weight,height)\n",
        "plt.title(\"Relationship between weiht and height of riders\")\n",
        "plt.ylabel(\"Height in Meters\")\n",
        "plt.xlabel(\"weight of riders in kgs\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "kINDqUqG6K1J",
        "outputId": "456b3bc2-b47a-4fa3-bb9f-e8be8cf862af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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cd1KpRKWlpYaNyIi0l57F2vYq0xR0mwcBQB71ePT0ImqWrUNOyYmJmjXrh3i4uI02q9cuYJGjRoBALy9vWFsbIz9+/dLy+Pi4nDjxg106NChUuslInqeGBooMLvn439Gnw48hfdn93Tn5GSqFqr0ooI5OTlISEiQ7iclJSE2NhbW1tZwcnLCtGnTMHDgQHTu3Bn+/v7YvXs3du7cicjISACASqXCqFGj8O6778La2hqWlpaYOHEiOnTooPWZWERE9GyCPOyxYmgbhO28qDFZ2U5litk93RHkYV+F1RH9nyo99TwyMhL+/v5F2kNDQxEREQEA+OGHHxAeHo5//vkHbm5uCAsLQ+/evaW+ubm5mDp1KtavX4+8vDwEBgZi+fLlpR7GehpPPSciena8gjJVFW0/v6vNdXaqEsMOERFRzVPjr7NDREREpA8MO0RERCRrDDtEREQkaww7REREJGsMO0RERCRrDDtEREQkaww7REREJGsMO0RERCRrDDtEREQkaww7REREJGsMO0RERCRrDDtEREQkaww7REREJGsMO0RERCRrDDtEREQkaww7REREJGsMO0RERCRrDDtEREQkaww7REREJGsMO0RERCRrDDtEREQkaww7REREJGsMO0RERCRrDDtEREQkaww7REREJGsMO0RERCRrDDtEREQkaww7REREJGsMO0RERCRrDDtEREQkaww7REREJGsMO0RERCRrDDtEREQkaww7REREJGsMO0RERCRrDDtEREQkaww7REREJGsMO0RERCRrOoedH3/8Eb/99pt0//3334eVlRU6duyI69ev67U4IiIiovLSOex8+umnqFWrFgAgJiYGy5Ytw8KFC1GvXj1MmTJF7wUSERERlYeRrg9ITk5GkyZNAADbt29Hv3798NZbb6FTp07o2rWrvusjIiIiKhed9+yYm5vj7t27AIA///wT3bt3BwCYmpriwYMH+q2OiIiIqJx03rPTvXt3vPnmm2jdujWuXLmCHj16AAD+/vtvODs767s+IiIionLRec/OsmXL0LFjR9y5cwdbtmxB3bp1AQCnT5/G66+/rvcCiYiIiMpDIYQQ2nbOz8/Hp59+ipEjR6Jhw4YVWVelysrKgkqlQmZmJiwtLau6HCIiItKCtp/fOu3ZMTIywsKFC5Gfn1/uAomIiIgqg86Hsbp164aoqKiKqIWI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eXnIy8uT7mdlZem1biIiIqo+qm3YOX36NJYsWYIzZ85AoVCU2O/dd9+Vfvb09ISJiQnGjBmD8PBwKJXKYh8THh6OsLAwvddMRERE1U+1PYwVHR2NtLQ0ODk5wcjICEZGRrh+/TqmTp0KZ2fnEh/n4+OD/Px8XLt2rcQ+M2fORGZmpnRLTk7W/wYQERFRtVBt9+wMGzYMAQEBGm2BgYEYNmwYRowYUeLjYmNjYWBgAFtb2xL7KJXKEvf6EBERkbxUadjJyclBQkKCdD8pKQmxsbGwtraGk5MT6tatq9Hf2NgYdnZ2cHNzAwDExMTg+PHj8Pf3h4WFBWJiYjBlyhQMHToUderUqdRtISIiouqpSsPOqVOn4O/vL90vnH8TGhqKiIiIMh+vVCqxYcMGzJkzB3l5eXBxccGUKVM05vEQERHR800hhBBVXURVy8rKgkqlQmZmJiwtLau6HCIiItKCtp/f1XaCMhEREZE+MOwQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrDHsEBERkawx7BAREZGsMewQERGRrBlVdQFyVaAWOJGUjrTsXNhamKK9izUMDRRVXRYREdFzp0r37Bw6dAg9e/aEg4MDFAoFtm/fXmLfsWPHQqFQYPHixRrt6enpGDJkCCwtLWFlZYVRo0YhJyenYgsvw+4LqfBdcACvf3sM72yIxevfHoPvggPYfSG1SusiIiJ6HlVp2Ll37x68vLywbNmyUvtt27YNx44dg4OD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2B0yZAjq1auH3r17Izo6GklJSYiMjMSkSZPwzz//lLjuXbt2YenSpYiNjcX169exZs0aqNVq6UytimRoaIh169bBy8sLL730Em7dugUAGDNmDC5fvozp06fjypUr+OWXXxAREQHg/36XkydPxp49e5CUlIQzZ87g4MGDaNGiRYXXTFSZGHaIaqguXbqgoKBACjvW1tZwd3eHnZ2dxgesp6cnoqKicOXKFfj5+aF169aYNWuWxryVJxkaGmL79u3IyclBu3bt8Oabb0qBwNTUVOv6OnbsiLFjx2LgwIGwsbHBwoULi+0XEhKCJUuW4LPPPkPLli3xzTffYPXq1Rp7p/TFwMAA27Ztw4MHD9C+fXu8+eabmDdvnkaf2rVr49ChQ3BycpLmQo0aNQq5ubmwtLQscd1WVlbYunUrXnrpJbRo0QIrV67E+vXr0bJlS71vR3GMjIyk53vppZeQlpYGFxcXbN68GVu3boWnpydWrFgh/S6VSiWAx2ffjR8/Hi1atEBQUBCaNWuG5cuXV0rNRJVFIYQQVV0EEVVvR44cga+vLxISEso9z4eq1rx587By5UokJydXdSlElYZXUCaiIrZt2wZzc3M0bdoUCQkJeOedd9CpUycGnRpo+fLlaNeuHerWrYsjR45g0aJFJR7CJJIrhh0iKiI7OxvTp0/HjRs3UK9ePQQEBODzzz+v6rLoGcTHx+OTTz5Beno6nJycMHXqVMycObOqyyKqVDyMRURERLLGCcpEREQkaww7REREJGsMO0RERCRrDDtEREQkaww7REREJGsMO0RERCRrDDtEREQkaww7REREJGsMO0RERCRr/w9gPugwAch/ZwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "plt.figure(figsize=(14,5))\n",
        "plt.title(\"riders's weight in kgs\",fontsize=14, fontstyle='italic')\n",
        "\n",
        "plt.bar(x=rider,height=weight,width=0.5,color=\"red\",edgecolor=\"k\",alpha=0.5)\n",
        "plt.xlabel(\"rider\",fontsize=12)\n",
        "plt.yticks(fontsize=13,rotation=30)\n",
        "plt.ylabel(\"weight (in kgs)\",fontsize=15)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 492
        },
        "id": "JJKU7cLU9S_v",
        "outputId": "e51cad2c-404b-4ba8-887f-3891adf69acb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "plt.figure(figsize=(7,5))\n",
        "plt.hist(weight,color='green',edgecolor='k', alpha=0.75,bins=5)\n",
        "\n",
        "plt.title(\"Histogram of rider weight\",fontsize=18)\n",
        "plt.xlabel(\"Weight in kgs\",fontsize=15)\n",
        "plt.xticks(fontsize=15)\n",
        "plt.yticks(fontsize=15)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "id": "eo-YvU6LEw84",
        "outputId": "20c88c47-8ed6-497c-aaec-3388736ab924"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "part-03:Access data from various sources and formats"
      ],
      "metadata": {
        "id": "H0akg02ztOB1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "df1=pd.read_table(\"/content/india Olympics gold medals list fro.txt\")\n",
        "df1\n"
      ],
      "metadata": {
        "id": "Lr7WsZO1tdfi",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "outputId": "c4b8cc9d-107e-4314-c416-4a96de408002"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  india Olympics gold medals list from the year 2000\n",
              "0                    year       no. of . gold medals\n",
              "1                                    2000 -        0\n",
              "2                                    2004-         0\n",
              "3                                    2008 -        1\n",
              "4                                    2012  -       0\n",
              "5                                    2016 -        0\n",
              "6                                    2020 -        1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8c8feb40-332b-45fc-87fb-d45efb817f8a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>india Olympics gold medals list from the year 2000</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>year       no. of . gold medals</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2000 -        0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2004-         0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2008 -        1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2012  -       0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2016 -        0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2020 -        1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c8feb40-332b-45fc-87fb-d45efb817f8a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8c8feb40-332b-45fc-87fb-d45efb817f8a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8c8feb40-332b-45fc-87fb-d45efb817f8a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a11670ff-32a7-4de4-83e8-8dd51b39a396\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a11670ff-32a7-4de4-83e8-8dd51b39a396')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a11670ff-32a7-4de4-83e8-8dd51b39a396 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_85804674-a72b-48cd-a356-fb36d4158ccb\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df1')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_85804674-a72b-48cd-a356-fb36d4158ccb button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df1');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df1",
              "summary": "{\n  \"name\": \"df1\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"india Olympics gold medals list from the year 2000\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"year       no. of . gold medals\",\n          \"2000 -        0\",\n          \"2016 -        0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data2=pd.read_csv(\"/content/gold medal.csv\")\n",
        "data2\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "RjiKcqvS475p",
        "outputId": "13e620f8-9768-4552-dc43-6bd3f1c58a80"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   year   no. of .gold medal\n",
              "0   2000                   0\n",
              "1   2004                   0\n",
              "2   2008                   1\n",
              "3   2012                   0\n",
              "4   2016                   0\n",
              "5   2020                   1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ea6ee9e5-de7a-4525-8ded-95bcc0a770a5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>no. of .gold medal</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2004</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2008</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2012</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2016</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2020</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea6ee9e5-de7a-4525-8ded-95bcc0a770a5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ea6ee9e5-de7a-4525-8ded-95bcc0a770a5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ea6ee9e5-de7a-4525-8ded-95bcc0a770a5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e48104e0-3a36-4d75-bdc4-444f9ee894c9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e48104e0-3a36-4d75-bdc4-444f9ee894c9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e48104e0-3a36-4d75-bdc4-444f9ee894c9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_20f53529-2794-4ef2-beeb-b5c351730a9b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data2')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_20f53529-2794-4ef2-beeb-b5c351730a9b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data2');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data2",
              "summary": "{\n  \"name\": \"data2\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"year \",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 2000,\n        \"max\": 2020,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2000,\n          2004,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no. of .gold medal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data3=pd.read_excel(\"/content/gold medal...xlsx\")\n",
        "data3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "2AhyKvcS5xAJ",
        "outputId": "fc676ac2-d99e-4623-c069-a76c722b50e6"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   year   no. of .gold medal\n",
              "0   2000                   0\n",
              "1   2004                   0\n",
              "2   2008                   1\n",
              "3   2012                   0\n",
              "4   2016                   0\n",
              "5   2020                   1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7c8702a3-41bb-42f3-b0ba-60116d87a08d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>no. of .gold medal</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2004</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2008</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2012</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2016</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2020</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7c8702a3-41bb-42f3-b0ba-60116d87a08d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7c8702a3-41bb-42f3-b0ba-60116d87a08d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7c8702a3-41bb-42f3-b0ba-60116d87a08d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f753f694-cfef-43da-869b-2bf53a7950da\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f753f694-cfef-43da-869b-2bf53a7950da')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f753f694-cfef-43da-869b-2bf53a7950da button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_bf9637d2-30f6-4f62-825e-80eeab920f0c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data3')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_bf9637d2-30f6-4f62-825e-80eeab920f0c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('data3');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data3",
              "summary": "{\n  \"name\": \"data3\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"year \",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 2000,\n        \"max\": 2020,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2000,\n          2004,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no. of .gold medal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    }
  ]
}